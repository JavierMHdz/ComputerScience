
char* itoa(int val, int base){
	static char buf[MAXBUFLEN] = {0};
	int i = 30;
	for(; val && i; --i, val /= base){
		buf[i] = "0123456789abcdef"[val%base];
	}
	return &buf[i+1];
}

int main(){
    int sockfd;
    struct addrinfo hints, *servinfo, *p;
    int rv;
    int numbytes;

    //I added this for reading files
    /*struct sockaddr_storage their_addr;
    socklen_t addr_len;
    char buf[MAXBUFLEN];

    /*if (argc != 3) {
        fprintf(stderr,"usage: mainServer <ID> <size>\n");
        exit(1);
	}*/

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_DGRAM;

    //localhost IP address is hardcoded in this program
    if ((rv = getaddrinfo("127.0.0.1", DBPORT, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and make a socket
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("mainServer: socket");
			continue;
		}
		//bind()
		if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("mainServer: bind");
            continue;
        }
		break;
	}

    if (p == NULL) {
        fprintf(stderr, "mainServer: failed to bind socket\n");
        return 2;
	}

	//Booting up message
    printf("The Main Server is up and running\n");

	//freeaddrinfo(servinfo);
	
	//while loop 
	while(1){
		//receive input()
		printf("Please input link ID and file size(<ID><size>):\n");

    	//file size
    	//char c = *argv[2];
    	/*char linkID[MAXBUFLEN];
    	fgets(linkID);
    	char* sizeFile = gets();*/
    	int linkID;
    	int sizeFile;
    	scanf("%d", &linkID);
    	scanf("%d", &sizeFile);

    	printf("Link %d, file size %d MB.\n", linkID, sizeFile);

    	//char linkString[MAXBUFLEN];
    	//char sizeString[MAXBUFLEN];

    	//printf(itoa(linkID, 10));
    	//printf(itoa(sizeFile, 10));

    	//sendto()
    	if ((numbytes = sendto(sockfd, itoa(linkID, 10), strlen(itoa(linkID, 10)), 0,
             p->ai_addr, p->ai_addrlen)) == -1) {
        	perror("mainServer: sendto");
			exit(1);
		}

		//Message after sending to dbServer
		printf("Send Link %d to database server.\n", linkID);
		freeaddrinfo(servinfo);

		//Now, it is time to listen
		/*addr_len = sizeof their_addr;
    	if ((numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
        	(struct sockaddr *)&their_addr, &addr_len)) == -1) {
        	perror("recvfrom");
        	exit(1);
		}*/
    	/*printf("listener: got packet from %s\n",

        inet_ntop(their_addr.ss_family,
            get_in_addr((struct sockaddr *)&their_addr),
            s, sizeof s));*/

		//Upon receiving from Database Server
    	//printf("listener: packet is %d bytes long\n", numbytes);

    	/*buf[numbytes] = '\0';

    	printf("listener: packet contains \"%s\"\n", buf);*/

    	
    	close(sockfd);
	}
	return 0;
}
